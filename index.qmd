---
title: "Flink & Spark Streaming"
bibliography: bib.yaml
csl: iso690-author-date-de.csl
subtitle: ""
lang: de-DE
format:
  revealjs:
    slide-number: true
    theme: dark
    center: true
    incremental: true
---

##

::::{.columns}
:::{.column}

### Batch Processing

Analyse _beschränkter_ Datenmengen mit bekannter, endlicher Größe

→ Spark

:::
:::{.column .fragment}

### Stream Processing

Analyse _potenziell unbeschränkter_ Datenmengen, die _inkrementell_ eintreffen

→ Spark Streaming & Flink

:::
::::

::: {.notes}
- Fraud detection systems need to determine if the usage patterns of a credit card have unexpectedly changed, and block the card if it is likely to have been stolen.
- Trading systems need to examine price changes in a financial market and execute trades according to specified rules.
- Manufacturing systems need to monitor the status of machines in a factory, and quickly identify the problem if there is a malfunction.
- Military and intelligence systems need to track the activities of a potential aggressor, and raise the alarm if there are signs of an attack.
:::

## Spark Streaming & Flink

::: {.r-stack}
![](assets/streaming-arch.png){}

![](assets/flink-header-logo.png){.fragment}

:::

## Spark Streaming & Flink

:::{.nonincremental}
- schreiben keine Zwischenergebnisse auf Platte
- gerichteter azyklischer Graph (DAG) aus Operatoren
```{mermaid}
flowchart LR
    id10[Quelle] --> id1(flatMap) --> id6(filter) --> id2(map) --> id3(reduceByKey) --> id11[Senke]
    id1 --> id4(filter) --> id99(flatMap) --> id5(map) --> id3
```
:::

## Spark Streaming

- Batchframework, das Streamverarbeitung asymptotisch annähert
- Ausfalltoleranz durch Microbatching
![](assets/streaming-flow.png){width="60%"}
- Jeder Microbatch kann wie jeder andere Spark-Job nach Ausfall neu gestartet werden
- Exactly-once-Charakteristik
- Kompromiss: Overhead oder Latenz


::::: {.notes}
Microbatching: Typische Batchgröße ist ca. 1 Sekunde. 
Kürzere Batchzeit - mehr Scheduling und Koordination
Längere Batchzeit - höhere Latenzzeit (HFT: wenn ich die Rechner schon möglichst nah an die Börse stelle,
will ich evtl. nicht unbedingt auf Spark warten müssen)
:::::

## Flink

- Streamframework, das als Batchframework crossdressen kann
- Fehlertoleranz via Checkpointing
- Regelmäßige Barrieren im Stream, ab denen nach Ausfall wieder aufgesetzt werden kann
- Die Quelle muss das unterstützen (bspw. Kafka)
- Exactly-once


